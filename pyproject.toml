[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "victron-alfen-charger"
version = "1.0.0"
description = "Victron Energy integration driver for Alfen EV chargers"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Ron", email = "ron@example.com"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]
requires-python = ">=3.8"
dependencies = [
    "pymodbus==3.6.4",
    "pyyaml>=6.0.1",
    "pytz",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "types-pyyaml",
    "types-pytz",
    "bandit>=1.7.0",
]
# Optional extra to enable aiohttp-based Tibber HTTP client (faster, async)
fast = [
    "aiohttp>=3.9.1,<4",
]

test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
]

[project.scripts]
victron-alfen-charger = "alfen_driver.cli:main"

[tool.setuptools.packages.find]
include = ["alfen_driver*"]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "S",   # bandit
]
ignore = [
    "S101",  # Use of assert
    "S603",  # subprocess call check
    "S607",  # Starting a process with a partial executable path
    "B009",  # getattr with constant attribute
    "B010",  # setattr with constant attribute
    "E501",  # line too long handled by black
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "S105", "S108", "S310"]  # Allow asserts, literals, and lenient URL checks in tests
"examples/*" = ["S106", "S108", "S311"]  # Examples may show simplified patterns
"alfen_driver/tibber.py" = ["S310"]  # Allow urllib usage
"reference/*" = ["F401", "F403", "F405", "N801"]  # Reference code kept as-is

[tool.ruff]
line-length = 88
target-version = "py38"

[tool.mypy]
python_version = "3.9"
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = false
warn_unused_configs = true
warn_unreachable = true

[[tool.mypy.overrides]]
module = [
    "dbus.*",
    "gi.*",
    "vedbus.*",
    "pymodbus.*",
    "aiohttp.*",
]
ignore_missing_imports = true

# Allow untyped decorators for web middlewares
allow_redefinition = true
disallow_any_generics = false
no_warn_no_return = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --cov=alfen_driver --cov-report=term-missing --cov-report=html"
testpaths = [
    "tests",
]
python_files = [
    "test_*.py",
    "*_test.py",
]
python_classes = [
    "Test*",
]
python_functions = [
    "test_*",
]

[tool.coverage.run]
source = ["alfen_driver"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    'class .*\bProtocol\):',
    '@(abc\.)?abstractmethod',
]

[tool.bandit]
exclude_dirs = ["tests", "reference"]
skips = ["B101"]  # Skip assert used tests
